package com.kirkley.guitar.tab;

import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;

import org.herac.tuxguitar.gui.TuxGuitar;
import org.herac.tuxguitar.gui.editors.tab.TGFactoryImpl;
import org.herac.tuxguitar.gui.util.MessageDialog;
import org.herac.tuxguitar.io.ascii.ASCIISongExporter;
import org.herac.tuxguitar.io.base.TGFileFormatException;
import org.herac.tuxguitar.io.base.TGFileFormatManager;
import org.herac.tuxguitar.io.base.TGInputStreamBase;
import org.herac.tuxguitar.io.gtp.GP1InputStream;
import org.herac.tuxguitar.io.gtp.GP2InputStream;
import org.herac.tuxguitar.io.gtp.GP3InputStream;
import org.herac.tuxguitar.io.gtp.GP4InputStream;
import org.herac.tuxguitar.io.gtp.GP5InputStream;
import org.herac.tuxguitar.io.gtp.GTPSettingsUtil;
import org.herac.tuxguitar.io.ptb.PTInputStream;
import org.herac.tuxguitar.song.factory.TGFactory;
import org.herac.tuxguitar.song.managers.TGSongManager;
import org.herac.tuxguitar.song.models.TGSong;

public class GuitarTabUtils {


	
    private static TGFileFormatManager fileFormatManager = TGFileFormatManager.instance();
	
    private static TGSongManager songManager;
    
	static {
		/*
		 * Init all the file formats
		 */
		GP1InputStream gp1InputStream = new GP1InputStream(GTPSettingsUtil.instance().getSettings());
		GP2InputStream gp2InputStream = new GP2InputStream(GTPSettingsUtil.instance().getSettings());
		GP3InputStream gp3InputStream = new GP3InputStream(GTPSettingsUtil.instance().getSettings());
		GP4InputStream gp4InputStream = new GP4InputStream(GTPSettingsUtil.instance().getSettings());
		GP5InputStream gp5InputStream = new GP5InputStream(GTPSettingsUtil.instance().getSettings());
		
		PTInputStream ptInputStream = new PTInputStream();
		
		fileFormatManager.addInputStream(gp1InputStream);
		fileFormatManager.addInputStream(gp2InputStream);
		fileFormatManager.addInputStream(gp3InputStream);
		fileFormatManager.addInputStream(gp4InputStream);
		fileFormatManager.addInputStream(gp5InputStream);
		fileFormatManager.addInputStream(ptInputStream);
		
	}
	
	public static void exportToAscii(GuitarTab tab) {
		ASCIISongExporter exporter = new ASCIISongExporter();
//		OutputStream stream = new BufferedOutputStream(new FileOutputStream(new File(path)));
//		TGSongManager manager = TuxGuitar.instance().getSongManager();
//		exporter.init( manager.getFactory() , stream );
//		exporter.exportSong(manager.getSong());
		exporter.init(new CustomFactoryImpl(), stream)
	}
	
	public static TabMetaData readTabMetaData(File tab) throws IOException {
		return readTabMetaData(new FileInputStream(tab));
	}
	
	public static TabMetaData readTabMetaData(InputStream stream) throws IOException {
	    return readTab(stream).getTabMetaData();
	}
	
	public static GuitarTab readTab(File tab) throws IOException{
		try {
			return readTab(new FileInputStream(tab));
		} catch (Exception e) {
			throw new IOException("Unable the read file: "+ tab == null ? "null" : tab.getAbsolutePath(),e);
		}
	}
	
	public static GuitarTab readTab(InputStream stream) throws IOException{
	    try{
    		GuitarTab song = (GuitarTab)TGFileFormatManager.instance().getLoader().load(getSongManager().getFactory(),stream);  
    		return song;
	    } catch (Exception e) {
	    	throw new IOException("Unable to read tab", e);
	    } finally {
	    	try{ stream.close(); } catch(Exception e){}
	    }
	}
	
	private static TGSongManager getSongManager() {
		if(songManager == null){
			songManager = new TGSongManager(new CustomFactoryImpl());
			songManager.setSong(songManager.newSong());
		}
		return songManager;
	}
	
	private static class CustomFactoryImpl extends TGFactoryImpl {
		@Override
		public TGSong newSong() {
			return new GuitarTab();
		}
	}
}
